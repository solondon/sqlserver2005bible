//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SimpleClient {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private pProduct_FetchDataTable tablepProduct_Fetch;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["pProduct_Fetch"] != null)) {
                    this.Tables.Add(new pProduct_FetchDataTable(ds.Tables["pProduct_Fetch"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pProduct_FetchDataTable pProduct_Fetch {
            get {
                return this.tablepProduct_Fetch;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["pProduct_Fetch"] != null)) {
                this.Tables.Add(new pProduct_FetchDataTable(ds.Tables["pProduct_Fetch"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablepProduct_Fetch = ((pProduct_FetchDataTable)(this.Tables["pProduct_Fetch"]));
            if ((this.tablepProduct_Fetch != null)) {
                this.tablepProduct_Fetch.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablepProduct_Fetch = new pProduct_FetchDataTable();
            this.Tables.Add(this.tablepProduct_Fetch);
        }
        
        private bool ShouldSerializepProduct_Fetch() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void pProduct_FetchRowChangeEventHandler(object sender, pProduct_FetchRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pProduct_FetchDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCode;
            
            private DataColumn columnName;
            
            private DataColumn columnProductDescription;
            
            private DataColumn columnActiveDate;
            
            private DataColumn columnDiscontinueDate;
            
            private DataColumn columnProductCategoryName;
            
            private DataColumn columnRowVersion;
            
            internal pProduct_FetchDataTable() : 
                    base("pProduct_Fetch") {
                this.InitClass();
            }
            
            internal pProduct_FetchDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ProductDescriptionColumn {
                get {
                    return this.columnProductDescription;
                }
            }
            
            internal DataColumn ActiveDateColumn {
                get {
                    return this.columnActiveDate;
                }
            }
            
            internal DataColumn DiscontinueDateColumn {
                get {
                    return this.columnDiscontinueDate;
                }
            }
            
            internal DataColumn ProductCategoryNameColumn {
                get {
                    return this.columnProductCategoryName;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public pProduct_FetchRow this[int index] {
                get {
                    return ((pProduct_FetchRow)(this.Rows[index]));
                }
            }
            
            public event pProduct_FetchRowChangeEventHandler pProduct_FetchRowChanged;
            
            public event pProduct_FetchRowChangeEventHandler pProduct_FetchRowChanging;
            
            public event pProduct_FetchRowChangeEventHandler pProduct_FetchRowDeleted;
            
            public event pProduct_FetchRowChangeEventHandler pProduct_FetchRowDeleting;
            
            public void AddpProduct_FetchRow(pProduct_FetchRow row) {
                this.Rows.Add(row);
            }
            
            public pProduct_FetchRow AddpProduct_FetchRow(string Code, string Name, string ProductDescription, System.DateTime ActiveDate, System.DateTime DiscontinueDate, string ProductCategoryName, System.Byte[] RowVersion) {
                pProduct_FetchRow rowpProduct_FetchRow = ((pProduct_FetchRow)(this.NewRow()));
                rowpProduct_FetchRow.ItemArray = new object[] {
                        Code,
                        Name,
                        ProductDescription,
                        ActiveDate,
                        DiscontinueDate,
                        ProductCategoryName,
                        RowVersion};
                this.Rows.Add(rowpProduct_FetchRow);
                return rowpProduct_FetchRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                pProduct_FetchDataTable cln = ((pProduct_FetchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new pProduct_FetchDataTable();
            }
            
            internal void InitVars() {
                this.columnCode = this.Columns["Code"];
                this.columnName = this.Columns["Name"];
                this.columnProductDescription = this.Columns["ProductDescription"];
                this.columnActiveDate = this.Columns["ActiveDate"];
                this.columnDiscontinueDate = this.Columns["DiscontinueDate"];
                this.columnProductCategoryName = this.Columns["ProductCategoryName"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCode = new DataColumn("Code", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCode);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnProductDescription = new DataColumn("ProductDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductDescription);
                this.columnActiveDate = new DataColumn("ActiveDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActiveDate);
                this.columnDiscontinueDate = new DataColumn("DiscontinueDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDiscontinueDate);
                this.columnProductCategoryName = new DataColumn("ProductCategoryName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductCategoryName);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnCode.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnActiveDate.AllowDBNull = false;
                this.columnProductCategoryName.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            public pProduct_FetchRow NewpProduct_FetchRow() {
                return ((pProduct_FetchRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new pProduct_FetchRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(pProduct_FetchRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pProduct_FetchRowChanged != null)) {
                    this.pProduct_FetchRowChanged(this, new pProduct_FetchRowChangeEvent(((pProduct_FetchRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pProduct_FetchRowChanging != null)) {
                    this.pProduct_FetchRowChanging(this, new pProduct_FetchRowChangeEvent(((pProduct_FetchRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pProduct_FetchRowDeleted != null)) {
                    this.pProduct_FetchRowDeleted(this, new pProduct_FetchRowChangeEvent(((pProduct_FetchRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pProduct_FetchRowDeleting != null)) {
                    this.pProduct_FetchRowDeleting(this, new pProduct_FetchRowChangeEvent(((pProduct_FetchRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovepProduct_FetchRow(pProduct_FetchRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pProduct_FetchRow : DataRow {
            
            private pProduct_FetchDataTable tablepProduct_Fetch;
            
            internal pProduct_FetchRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablepProduct_Fetch = ((pProduct_FetchDataTable)(this.Table));
            }
            
            public string Code {
                get {
                    return ((string)(this[this.tablepProduct_Fetch.CodeColumn]));
                }
                set {
                    this[this.tablepProduct_Fetch.CodeColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tablepProduct_Fetch.NameColumn]));
                }
                set {
                    this[this.tablepProduct_Fetch.NameColumn] = value;
                }
            }
            
            public string ProductDescription {
                get {
                    try {
                        return ((string)(this[this.tablepProduct_Fetch.ProductDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepProduct_Fetch.ProductDescriptionColumn] = value;
                }
            }
            
            public System.DateTime ActiveDate {
                get {
                    return ((System.DateTime)(this[this.tablepProduct_Fetch.ActiveDateColumn]));
                }
                set {
                    this[this.tablepProduct_Fetch.ActiveDateColumn] = value;
                }
            }
            
            public System.DateTime DiscontinueDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablepProduct_Fetch.DiscontinueDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepProduct_Fetch.DiscontinueDateColumn] = value;
                }
            }
            
            public string ProductCategoryName {
                get {
                    return ((string)(this[this.tablepProduct_Fetch.ProductCategoryNameColumn]));
                }
                set {
                    this[this.tablepProduct_Fetch.ProductCategoryNameColumn] = value;
                }
            }
            
            public System.Byte[] RowVersion {
                get {
                    try {
                        return ((System.Byte[])(this[this.tablepProduct_Fetch.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepProduct_Fetch.RowVersionColumn] = value;
                }
            }
            
            public bool IsProductDescriptionNull() {
                return this.IsNull(this.tablepProduct_Fetch.ProductDescriptionColumn);
            }
            
            public void SetProductDescriptionNull() {
                this[this.tablepProduct_Fetch.ProductDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsDiscontinueDateNull() {
                return this.IsNull(this.tablepProduct_Fetch.DiscontinueDateColumn);
            }
            
            public void SetDiscontinueDateNull() {
                this[this.tablepProduct_Fetch.DiscontinueDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tablepProduct_Fetch.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tablepProduct_Fetch.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pProduct_FetchRowChangeEvent : EventArgs {
            
            private pProduct_FetchRow eventRow;
            
            private DataRowAction eventAction;
            
            public pProduct_FetchRowChangeEvent(pProduct_FetchRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public pProduct_FetchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
